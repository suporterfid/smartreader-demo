services:
  web:
    build: .
    command: >
      sh -c "python manage.py makemigrations && 
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    volumes:
      - ./src/:/app/
    working_dir: /app
    depends_on:
      - mqtt
      - rabbitmq
      - db
      - redis
      - dapr-mqtt-publisher
    environment:
      - TZ=UTC
      - MQTT_PORT=${MQTT_PORT}
      - MQTT_BROKER=${MQTT_BROKER}
      - MQTT_MAX_MESSAGE_SIZE=${MQTT_MAX_MESSAGE_SIZE}
      - MQTT_MAX_RECONNECT_ATTEMPTS=${MQTT_MAX_RECONNECT_ATTEMPTS}
      - MQTT_RECONNECT_DELAY=${MQTT_RECONNECT_DELAY}
      - MQTT_KEEPALIVE=${MQTT_KEEPALIVE}
      - MQTT_USE_TLS=${MQTT_USE_TLS}
      - MQTT_QOS=${MQTT_QOS}
      - MQTT_RETAIN=${MQTT_RETAIN}
      - SECURE_SSL_REDIRECT=${SECURE_SSL_REDIRECT}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}      
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - API_KEY=${API_KEY}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - DB_SSL_REQUIRE=${DB_SSL_REQUIRE}
      - SECURE_SSL_REDIRECT=${SECURE_SSL_REDIRECT}  
    networks:
      - app_network
    restart: unless-stopped
  
  nginx:
      image: nginx:latest
      ports:
        - "80:80"
        - "443:443"
      volumes:
        - ./nginx.conf:/etc/nginx/nginx.conf:ro
        - ./ssl:/etc/nginx/ssl
      depends_on:
        - web
      networks:
        - app_network

  db:
    image: postgres:13
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - TZ=UTC
      - POSTGRES_DB=smartreaderdb
      - POSTGRES_USER=smartreader_user
      - POSTGRES_PASSWORD=smartreader_password
    ports:
      - "5432:5432"
    networks:
      - app_network
    restart: unless-stopped

  mqtt:
    image: eclipse-mosquitto:1.6.15
    ports:
      - "1883:1883"
    volumes:
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    networks:
      - app_network
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      retries: 5
      timeout: 10s
    networks:
      - app_network
    restart: unless-stopped
  
  redis:
    image: redis:6
    environment:
      - TZ=America/Sao_Paulo
    ports:
      - "6379:6379"
    networks:
      - app_network
    restart: unless-stopped

  celery:
    build: .
    command: celery -A config worker -l info
    volumes:
      - ./src:/app
    working_dir: /app
    depends_on:
      - mqtt
      - rabbitmq
      - db
      - redis
      - dapr-mqtt-publisher
    environment:
      # - TZ=America/Sao_Paulo
      - TZ=UTC
      - MQTT_PORT=${MQTT_PORT}
      - MQTT_BROKER=${MQTT_BROKER}
      - MQTT_MAX_MESSAGE_SIZE=${MQTT_MAX_MESSAGE_SIZE}
      - MQTT_MAX_RECONNECT_ATTEMPTS=${MQTT_MAX_RECONNECT_ATTEMPTS}
      - MQTT_RECONNECT_DELAY=${MQTT_RECONNECT_DELAY}
      - MQTT_KEEPALIVE=${MQTT_KEEPALIVE}
      - MQTT_USE_TLS=${MQTT_USE_TLS}
      - MQTT_QOS=${MQTT_QOS}
      - MQTT_RETAIN=${MQTT_RETAIN}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - DB_SSL_REQUIRE=${DB_SSL_REQUIRE}  
      - SECURE_SSL_REDIRECT=${SECURE_SSL_REDIRECT}
    networks:
      - app_network
    restart: unless-stopped
  
  celery-beat:
    build: .
    # command: celery -A config beat -l debug
    command: sh -c './wait-for-it.sh rabbitmq:5672 -t 120 -- celery -A config beat -l debug'
    volumes:
      - ./src:/app
      #- /etc/localtime:/etc/localtime:ro #Docker running on Linux
      #- /etc/timezone:/etc/timezone:ro   #Docker running on Linux
    working_dir: /app
    depends_on:
      - db
      - rabbitmq
      - redis
      - celery
    environment:
      - TZ=UTC
      - MQTT_PORT=${MQTT_PORT}
      - MQTT_BROKER=${MQTT_BROKER}
      - MQTT_MAX_MESSAGE_SIZE=${MQTT_MAX_MESSAGE_SIZE}
      - MQTT_MAX_RECONNECT_ATTEMPTS=${MQTT_MAX_RECONNECT_ATTEMPTS}
      - MQTT_RECONNECT_DELAY=${MQTT_RECONNECT_DELAY}
      - MQTT_KEEPALIVE=${MQTT_KEEPALIVE}
      - MQTT_USE_TLS=${MQTT_USE_TLS}
      - MQTT_QOS=${MQTT_QOS}
      - MQTT_RETAIN=${MQTT_RETAIN}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - CELERY_LOG_LEVEL=DEBUG
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - DB_SSL_REQUIRE=${DB_SSL_REQUIRE}
      - SECURE_SSL_REDIRECT=${SECURE_SSL_REDIRECT}  
    networks:
      - app_network
    restart: unless-stopped

  dapr-mqtt-publisher:
    build: .
    command: python manage.py run_mqtt_service
    volumes:
      - ./src:/app
      - ./components:/components
    depends_on:
      - mqtt
      - rabbitmq
      - db
      - redis
    environment:
      - APP_PORT=3500
      - DAPR_HTTP_PORT=3501
      - APP_ID=mqtt-publisher
      - COMPONENTS_PATH=/components
      - TZ=UTC
      - MQTT_PORT=${MQTT_PORT}
      - MQTT_BROKER=${MQTT_BROKER}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
    networks:
      - app_network
    restart: unless-stopped

  dapr-sidecar-publisher:
    image: "daprio/daprd:edge"
    command: ["./daprd",
     "-app-id", "mqtt-publisher",
     "-app-port", "3500",
     "-components-path", "/components"
    ]
    volumes:
      - ./components:/components
    depends_on:
      - dapr-mqtt-publisher
    network_mode: "service:dapr-mqtt-publisher"

  dapr-mqtt-subscriber:
    build: .
    command: python manage.py run_mqtt_subscriber
    volumes:
      - ./src:/app
      - ./components:/components
    depends_on:
      - mqtt
      - rabbitmq
      - db
      - redis
    environment:
      - APP_PORT=3502
      - DAPR_HTTP_PORT=3503
      - APP_ID=mqtt-subscriber
      - COMPONENTS_PATH=/components
      - TZ=UTC
      - MQTT_PORT=${MQTT_PORT}
      - MQTT_BROKER=${MQTT_BROKER}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
    networks:
      - app_network
    restart: unless-stopped

  dapr-sidecar-subscriber:
    image: "daprio/daprd:edge"
    command: ["./daprd",
     "-app-id", "mqtt-subscriber",
     "-app-port", "3502",
     "-components-path", "/components"
    ]
    volumes:
      - ./components:/components
    depends_on:
      - dapr-mqtt-subscriber
    network_mode: "service:dapr-mqtt-subscriber"
  
  # flower:
  #   build: .
  #   command: celery -A config flower --port=5555
  #   ports:
  #     - "5555:5555"
  #   environment:
  #     - TZ=UTC
  #     - CELERY_BROKER_URL=${CELERY_BROKER_URL}
  #     - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
  #   depends_on:
  #     - celery
  #     - redis
  #   networks:
  #     - app_network
  #   restart: unless-stopped

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  mosquitto_data:
  mosquitto_logs:
